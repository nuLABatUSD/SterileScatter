#include <iostream>#include <cmath>#include <fstream>#include "dummy_dep_vars.hh"#include "mixed_dummy_vars.hh"#include "sterile.hh"#include "sterile_decay.hh"#include "ODESolve.hh"#include <string>using std::string;using std::to_string;int main(){    // -------------- Simulation ------------------    int N = 200;    double m_s = 300.0;        sterile* nu_s = new sterile(m_s, 5*pow(10,-5));        double a0 = 0.1;    double af = 0.12;    mixed_dummy_vars* eps = new mixed_dummy_vars(0,a0,af,m_s,N);        double T_0 = 1/a0;    double T_f = 1/af;    sterile_decay* sim = new sterile_decay(m_s, 5*pow(10,-5), T_0, eps);        string sim_output = "outputs/sim_output_freqstest" + to_string(1) + ".csv";    string eps_output = "outputs/eps_output_freqstest" + to_string(1) + ".csv";        sim->run(500, 1, af, sim_output, true);    ofstream MyFile(eps_output);    sim->print_eps_file(MyFile);        MyFile.close();        // -------------- Interpolation ------------------        // Create a linspace object that covers the eps range    int N_lin = 200;    linspace_for_trap* lin = new linspace_for_trap(0, eps->get_value(N-1), N_lin);        // Make output file for the interpolation    string lin_output = "outputs/lin_output" + to_string(7) + ".csv";    ofstream MyFile2(lin_output);        freqs_ntT* freqs = sim->get_y_values();        // Print to output file        double x;    double results[6]; // initialize results array    cout << endl << "Interpolating.... :)" << endl;        for(int i = 0; i < N_lin; i++){        x = lin->get_value(i); // get x-value from linspace array        freqs->interpolate_extrapolate(x, T_f, results);             MyFile2 << x << "," << results[0] << ", " << results[1] << ", " << results[2] << ", " << results[3] << ", " << results[4] << ", " << results[5] << endl;            }         MyFile2.close();        return 1;    }